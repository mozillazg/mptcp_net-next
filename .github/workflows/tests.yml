name: "MPTCP Upstream Tests Validation"
on:
  push:
    workflow_dispatch:
    branches-ignore:
      - 'archived/**'    # previous branches
      - 't/**'           # TopGit tree
      - 'net'            # part of the TopGit tree
      - 'net-next'       # part of the TopGit tree
      - 'for-review'     # part of the TopGit tree
      - 'for-review-net' # part of the TopGit tree
    tags:
      - 'patchew/**'     # patchew is using tags
      # ideally, we would take 'export/**' but the cache is per branch...
      # In other words, when using tags, we can only use the cache if we re-tag.
      # https://github.com/actions/cache/issues/556
      # So we test the "export" branch and we try to find the tag later

env:
  CURL_OPT: "--no-progress-meter --connect-timeout 30 --retry 20 --retry-delay 10"
  CURL_ACC: "Accept: application/vnd.github.v3+json"
  URI: "https://api.github.com"
  PW: "https://patchwork.kernel.org/api/1.2"

permissions: {}

jobs:
  tests:
    name: "Tests"
    if: "! startswith(github.ref, 'refs/tags/patchew/') || contains(github.event.head_commit.message, 'Message-Id: ')"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # mode: ['normal', 'debug', 'btf']
        mode: ['btf']
    permissions:
      contents: read # to fetch code (actions/checkout)

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      #- name: "Collect Workflow Telemetry"
      #  uses: catchpoint/workflow-telemetry-action@v2

      - name: "Find base branch"
        id: branch
        run: |
          if [ "$(cat .git_markup)" = "MPTCP-related modifications only needed for our tests suite (mptcp-net)." ]; then
            echo "name=export-net" >> ${GITHUB_OUTPUT}
          else
            echo "name=export" >> ${GITHUB_OUTPUT}
          fi

      - name: "Restore cache for CCache"
        uses: actions/cache/restore@v4
        id: restore-ccache
        with:
          path: ${{ github.workspace }}/.virtme/ccache*
          key: ${{ runner.os }}_tests_${{ steps.branch.outputs.name }}-${{ matrix.mode }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}_tests_${{ steps.branch.outputs.name }}-${{ matrix.mode }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.sha }}
            ${{ runner.os }}_tests_${{ steps.branch.outputs.name }}-${{ matrix.mode }}-${{ github.run_id }}-${{ github.run_attempt }}-
            ${{ runner.os }}_tests_${{ steps.branch.outputs.name }}-${{ matrix.mode }}-${{ github.run_id }}-
            ${{ runner.os }}_tests_${{ steps.branch.outputs.name }}-${{ matrix.mode }}-
            ${{ runner.os }}_tests_${{ steps.branch.outputs.name }}-

      - name: "Docker image"
        run: |
          /usr/bin/docker pull mptcp/mptcp-upstream-virtme-docker:${{ steps.branch.outputs.name == 'export' && 'latest' || 'net' }}

      - name: "Tests"
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

          set -x
          /usr/bin/docker run --privileged --name mptcp \
            -e "INPUT_CCACHE_MAXSIZE=500M" \
            -e "INPUT_PACKETDRILL_STABLE=${{ steps.branch.outputs.name == 'export-net' && '1' || '0' }}" \
            -e "INPUT_EXTRA_ENV=${{ matrix.mode == 'btf' && 'INPUT_RUN_TESTS_ONLY=bpftest_all' || '' }}" \
            -e "INPUT_TRACE=${RUNNER_DEBUG}" \
            -e "INPUT_CI_TIMEOUT_SEC" \
            -e "INPUT_GCOV=1" \
            -e "GITHUB_SHA" -e "GITHUB_REF_NAME" -e "GITHUB_RUN_ID" \
            -e GITHUB_ACTIONS=true -e CI=true \
            --workdir "${PWD}" \
            -v "${PWD}:${PWD}" \
            mptcp/mptcp-upstream-virtme-docker:${{ steps.branch.outputs.name == 'export' && 'latest' || 'net' }} \
              manual-${{ matrix.mode }}

      - name: "Publish conclusion"
        if: always()
        run: |
          if [ -s "conclusion.txt" ]; then
            {
              echo '## Mode ${{ matrix.mode }}'
              echo '### Conclusion (${{ matrix.mode }})'
              cat "conclusion.txt"
              echo ''
              echo '### Summary (${{ matrix.mode }})'
              echo '```'
              cat "summary.txt"
              echo '```'
              echo ''
              echo '### Coverage (${{ matrix.mode }})'
              echo '```'
              cat "coverage.txt"
              echo '```'
            } >> "${GITHUB_STEP_SUMMARY}"
          fi

      - name: "Artifacts (always)"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.mode }}
          path: |
            conclusion.txt
            summary.txt
            coverage.txt
            *.tap
            config.zstd
            *.tap.xml
            results.json

      - name: "Artifacts (failure)"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-info-${{ matrix.mode }}
          path: |
            vmlinux.zstd
            kmemleak.txt

      - name: "Artifacts (LCov)"
        uses: actions/upload-artifact@v4
        with:
          name: lcov-${{ matrix.mode }}
          compression-level: 9
          path: |
            kernel.lcov

      - name: "Artifacts (code)"
        uses: actions/upload-artifact@v4
        if: github.repository_owner == 'multipath-tcp' && matrix.mode == 'normal' && (github.ref_name == 'export' || github.ref_name == 'export-net')
        with:
          name: code
          compression-level: 9
          path: |
            net/mptcp/*.[ch]

      - name: "Publish Test Results"
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          compare_to_earlier_commit: false
          check_run: false
          check_name: "Test Results (${{ matrix.mode }})"
          files: |
            *.tap.xml

      - name: "Save cache for CCache"
        if: always() && (github.repository_owner != 'multipath-tcp' || github.ref_name == 'export' || github.ref_name == 'export-net')
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/.virtme/ccache*
          key: ${{ steps.restore-ccache.outputs.cache-primary-key }}

  publish-test-results:
    name: "Publish Tests Results"
    needs: tests
    if: always()
    runs-on: ubuntu-latest
    permissions:
      checks: write

    steps:
      - name: "Get results"
        uses: actions/download-artifact@v4
        with:
          pattern: results-*
          merge-multiple: false

      - name: "Publish Test Results"
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_run_annotations_branch: "${{ steps.branch.outputs.name }}"
          files: |
            results-*/*.tap.xml
